import 'Sapphire'
Sapphire.toGlobalScope()

import rgb, setLoopingInterval from Sapphire.utils
import insert from table

{ resume: await } = coroutine

formatTime = (seconds) ->
  seconds = tonumber seconds
  if (seconds <= 0) then return '00:00'
  hours = string.format('%02.f', math.floor(seconds/3600))
  minutes = string.format('%02.f', math.floor(seconds/60 - (hours * 60)))
  secs = string.format('%02.f', math.floor(seconds - hours*3600 - minutes*60))
  return "#{minutes}:#{secs}"

intervals = {}
timerValue = 60

global root = Center({
  child: Column({
    background: BackgroundDecoration({
      padding: 30
      borderRadius: 10
      color: { 0.9, 0.9, 0.9 }
    }), -- BackgroundDecoration
    children: {
      Input({
        id: 'timer-text',
        text: formatTime(timerValue),
        onSubmit: =>
          timerValue = self.value
          self.style.text = formatTime(timerValue)
        textStyle: TextStyle({
          color: { 0, 0, 0 }
        }) -- TextStyle
      }) -- Input
      Row({
        children: {
          Button({
            text: 'Start',
            width: 150,
            textStyle: TextStyle({}),
            background: BackgroundDecoration({
              color: Colors.lightgreen,
              borderRadius: 10
            }), -- BackgroundDecoration
            onPressed: () =>
              self.style.background.style.alpha = 0.8
            onReleased: () =>
              self.style.background.style.alpha = 1
              intervals.timer = setLoopingInterval(1, () ->
                if (intervals.timer != nil)
                  timerValue -= 1
                  root.child.getElementById('timer-text').style.text = formatTime(timerValue)
                  if (timerValue <= 0) then intervals.timer = nil
              )
          }) -- Button
          Margin({ horizontal: 20 })
          Button({
            text: 'Stop',
            width: 150,
            background: BackgroundDecoration({
              color: Colors.lightcoral,
              borderRadius: 10
            }), -- BackgroundDecoration
            onPressed: () =>
              self.style.background.style.alpha = 0.8
            onReleased: () =>
              self.style.background.style.alpha = 1
              intervals.timer = nil
          }) -- Button
        }
      }) -- Row
    }
  }) -- Column
}) -- Center

love.draw = ->
  for name, interval in pairs intervals do await(interval)
  root.draw()

love.mousepressed = (x, y) ->
  root.onPressed(x, y)

love.mousereleased = ->
  root.onReleased()

love.textinput = (t) ->
  root.callfn('textInput', { t })

love.keypressed = (key) ->
  root.callfn('keyPressed', { key })