import 'Sapphire'
Sapphire.toGlobalScope()

import 'modules.tween'
import 'socket.http'

screenWidth, screenHeight = love.graphics.getDimensions()
animationList = {}

love.keyboard.setKeyRepeat(true)

remove = (object, value) ->
  for index, test in ipairs object
    if (test == value)
      object[index] = nil
      return true
  return false

Task = (props) ->
  taskColor = { 0.05, 0.05, 0.05 }

  { input: input } = props

  return Row({
    id: 'task',
    children: {
      Label({
        text: input.value,
        width: screenWidth - 100,
        background: BackgroundDecoration({
          color: taskColor,
          usePadding: 'inner-padding',
          innerPadding: 5,
          borderRadius: 5
        })
      }), -- Label
      Button({
        id: 'done',
        text: 'Feito'
        width: 100,
        background: BackgroundDecoration({
          color: taskColor,
          usePadding: 'inner-padding',
          innerPadding: 5,
          borderRadius: 5
        }),
        onPressed: () =>
          self.style.background.style.color = { 0.2, 0.2, 0.2 }
      }) -- Button
    }
  }) -- Row

global root = Column({
  children: {
    Label({
      text: 'Lista de Compras'
      width: screenWidth,
      height: 50
    }), -- Label
    Row({
      id: 'controller'
      children: {
        Input({
          id: 'task-name',
          width: screenWidth-100,
          height: 50,
          textStyle: TextStyle({
            color: Colors.white
          }), -- TextStyle
          background: BackgroundDecoration({
            color: { 0.15, 0.15, 0.15 },
            usePadding: 'inner-padding',
            innerPadding: 5,
            borderRadius: 5,
            borderAlpha: 0
          }) -- BackgroundDecoration
        }), -- Input
        Button({
          width: 100,
          height: 50,
          text: 'Adicionar',
          background: BackgroundDecoration({
            color: { 0.1, 0.1, 0.1 },
            usePadding: 'inner-padding',
            innerPadding: 5,
            borderRadius: 5
          }),
          onPressed: () =>
            self.style.background.style.color = { 0.2, 0.2, 0.2 }
          onReleased: () =>
            self.style.background.style.color = { 0.1, 0.1, 0.1 }
            taskName = root.getElementById('controller').getElementById('task-name')
            taskList = root.getElementById('task-list')
            if (taskName.value != "")
              task = Task({ input: taskName })
              
              done = task.getElementById('done')
              done.setEvent('onrelease', () =>
                animation = tween.new(0.25, task.style, { x: -task.style.width }, 'inOutSine')

                animation.onComplete = () =>
                  taskList.remove(task)
                  remove(animationList, animation)

                animation.onUpdate = task.align

                table.insert(animationList, animation)
              )

              taskList.append(task)
        }) -- Button
      }
    }), -- Row
    Column({
      id: 'task-list',
      width: windowWidth,
      height: windowHeight,
      children: {}
    }) -- Column
  }
}) -- Column

local logo

love.load = () ->
  -- Experimental!!
  logo = http.request('https://love2d.org/style/logo.png')
  logo = love.filesystem.newFileData(logo, 'logo.png')
  logo = love.graphics.newImage(logo)

love.update = (dt) ->
  for animation in *animationList
    animation::update(dt)

love.draw = () ->
  love.graphics.draw(logo)
  root.draw()

love.mousepressed = (x, y) ->
  root.onPressed(x, y)

love.mousereleased = () ->
  root.onReleased()

love.textinput = (t) ->
  root.call('textInput', { t })

love.keypressed = (key) ->
  root.call('keyPressed', { key })