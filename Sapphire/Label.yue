PATH = (...)
PATH = PATH::sub(1, #PATH-#"Label")
Element = require("#{PATH}.Element")

defaultFont = love.graphics.newFont(13)
defaultFont::setFilter('nearest', 'nearest')

collides = (x, y, w, h, xx, yy, ww, hh) ->
    x <= xx + ww and x + w >= xx and y <= yy + hh and y + h >= yy

return (options) ->
    label = Element(options)
    label.type = 'label'
    label.__lastCursor = nil

    style = label.style
    style.text = options.text ?? ''
    style.width ??= defaultFont::getWidth(style.text)
    style.height ??= defaultFont::getHeight()
    style.textAlign = options.textAlign or 'center-center'
    style.background = options.background
    style.textStyle = options.textStyle

    getTextPosition = ->
        text_width, text_height = defaultFont::getWidth(style.text), defaultFont::getHeight()
        local x, y
        if style.textAlign == 'top-left'
            x = style.x
            y = style.y
        elseif style.textAlign == 'top-center'
            x = style.x + (style.width / 2) - text_width / 2
            y = style.y
        elseif style.textAlign == 'top-right'
            x = (style.x + style.width) - text_width
            y = style.y
        elseif style.textAlign == 'center-left'
            x = style.x
            y = style.y + (style.height / 2) - text_height / 2
        elseif style.textAlign == 'center-center'
            x = style.x + (style.width / 2) - text_width / 2
            y = style.y + (style.height / 2) - text_height / 2
        elseif style.textAlign == 'center-right'
            x = (style.x + style.width) - text_width
            y = style.y + (style.height / 2) - text_height / 2
        return { x, y }

    label.autosize = ->
        style.width = style.font::getWidth(style.text)
        style.height = style.font::getHeight()

    label.draw = ->
        mx, my = love.mouse.getPosition()
        if (collides(style.x, style.y, style.width, style.height, mx, my, 1, 1)) then
            if label.__lastCursor == nil
                label.__lastCursor = love.mouse.getCursor()
            love.mouse.setCursor(love.mouse.getSystemCursor(style.cursor))
        else
            if label.__lastCursor != nil
                love.mouse.setCursor(label.__lastCursor)
            label.__lastCursor = nil

        if (style.background != nil)
            style.background.draw(style.x, style.y, style.width, style.height, {
                drawborder: label.focused
            })

        { textX, textY } = getTextPosition()

        if (style.textStyle == nil)
            love.graphics.setColor(style.color[1], style.color[2], style.color[3], style.alpha)
            love.graphics.printf(style.text, defaultFont, style.x, textY, style.width, 'center')
        else
            style.textStyle.draw(style.text, textX, textY)


    return label