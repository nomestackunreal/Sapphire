screenWidth, screenHeight = love.graphics.getDimensions()

collides = (x, y, w, h, xx, yy, ww, hh) ->
    x <= xx + ww and x + w >= xx and y <= yy + hh and y + h >= yy

sysCursor = love.mouse.getSystemCursor

return (options={}) ->
    column = {}

    column.master = options.master
    column.type = 'column'
    column.elements = {}
    column.id = options.id ?? ''
    column.positionMode = options.position ?? 'relative'
    column.x = options.x ?? 0
    column.y = options.y ?? 0
    column.width = options.width ?? screenWidth
    column.height = options.height ?? screenHeight
    column.spacing = options.spacing ?? 0
    column.justifyContent = options.justifyContent ?? 'center'
    column.background = options.background
    column.cursor = sysCursor(options.cursor ?? 'arrow')

    call = (functionName, arguments={}) ->
        for element in *column.elements
            if (element != nil)
                if (element[functionName] != nil)
                    element[functionName](unpack arguments)

    draw = ->
        if (column.background != nil and column.background.type == 'backgroundDecoration')
            column.background.draw(column.x, column.y, column.width, column.height)
        mx, my = love.mouse.getPosition()
        if (collides(column.x, column.y, column.width, column.height, mx, my, 1, 1))
            if love.mouse.getCursor() != column.cursor
                love.mouse.setCursor(column.cursor)
        call('draw')

    onPressed = (x, y) ->
        call('onPressed', { x, y })

    onReleased = ->
        call('onReleased')

    textInput = (t) ->
        call('textInput', { t })

    fixsize = ->
        height = 0
        for element in *column.elements
            height += element.style.height ?? 0
        column.height = height

        width = 0
        for element in *column.elements
            if ((element.style.width ?? 0) > width)
                width = element.style.width ?? 0
        column.width = width

    justify = ->
        switch column.justifyContent
            when 'center'
                for element in *column.elements
                    element.style.width ??= 0
                    if element.style.positionMode == 'relative'
                        element.style.x = column.x + (column.width / 2) - element.style.width / 2
                        if (element.align != nil) then element.align()
            when 'left'
                for element in *column.elements
                    element.style.width ??= 0
                    if element.style.positionMode == 'relative'
                        element.style.x = column.x
                        if (element.align != nil) then element.align()
            when 'right'
                for element in *column.elements
                    element.style.width ??= 0
                    if element.style.positionMode == 'relative'
                        element.style.x = (column.x + column.width) - element.style.width
                        if (element.align != nil) then element.align()

    align = ->
        y = column.y
        for element in *column.elements
            if (element.style.positionMode == 'relative')
                element.style.y = y
                y += (element.style.height ?? 0) + column.spacing
        justify()
        if (column.master != nil)
            column.master.align?()


    rawAppend = (element) ->
        table.insert(column.elements, element)
        element.master = column
        fixsize()

    append = (element) ->
        rawAppend(element)
        align()

    if (options.children != nil)
        for child in *options.children
            append(child)

    return {
        style: column,
        master: column.master,
        elements: column.elements,
        id: column.id,
        append: append,
        rawAppend: rawAppend,
        align: align,
        call: call,
        draw: draw,
        background: background,
        remove: (element) ->
            for index, test in ipairs column.elements
                if (test == element)
                    table.remove(column.elements, index)
            fixsize()
            align()
        getElementById: (id) ->
            for element in *column.elements
                if (element.id == id)
                    return element
        getElementByType: (type) ->
            for element in *column.elements
                if (element.type == type)
                    return element
        getElementsById: (id) ->
            elements = {}
            for element in *column.elements
                if (element.id == id)
                    elements[] = element
            return elements
        getElementsByType: (type) ->
            elements = {}
            for element in *column.elements
                if (element.type == type)
                    elements[] = element
            return elements
        setMaster: ->
            for element in *column.elements
                element.master = column
        onPressed: onPressed,
        onReleased: onReleased,
        textInput: textInput,
        keyPressed: (key) ->
            call('keyPressed', { key })
        placeHorizontally: (mode) ->
            column.justifyContent = mode ?? column.justifyContent
    }