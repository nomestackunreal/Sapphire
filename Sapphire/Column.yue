screenWidth, screenHeight = love.graphics.getDimensions()

return (options={}) ->
    column = {}

    column.type = 'column'
    column.elements = {}
    column.id = options.id ?? ''
    column.positionMode = options.position ?? 'relative'
    column.x = options.x ?? 0
    column.y = options.y ?? 0
    column.width = options.width ?? windowWidth
    column.height = options.height ?? windowHeight
    column.spacing = options.spacing ?? 0
    column.justifyContent = options.justifyContent ?? 'center'
    column.background = options.background ?? {
        enabled: false,
        color: { 0, 0, 0 }
    }

    call = (functionName, arguments={}) ->
        for element in *column.elements
            if (element[functionName] != nil)
                element[functionName](unpack arguments)
        -- love.graphics.setColor(1, 0, 0)
        -- love.graphics.rectangle('line', column.x, column.y, column.width, column.height)

    draw = ->
        if column.background.enabled
            love.graphics.setColor(unpack column.background.color)
            love.graphics.rectangle('fill', column.x, column.y, column.width, column.height)
        call('draw')

    onPressed = (x, y) ->
        call('onPressed', { x, y })

    onReleased = ->
        call('onReleased')

    textInput = (t) ->
        call('textInput', { t })

    justify = ->
        switch column.justifyContent
            when 'center'
                for element in *column.elements
                    if element.style.positionMode == 'relative'
                        element.style.x = column.x + (column.width / 2) - element.style.width / 2
                        if (element.align != nil) then element.align()
            when 'left'
                for element in *column.elements
                    if element.style.positionMode == 'relative'
                        element.style.x = column.x
                        if (element.align != nil) then element.align()
            when 'right'
                for element in *column.elements
                    if element.style.positionMode == 'relative'
                        element.style.x = (column.x + column.width) - element.style.width
                        if (element.align != nil) then element.align()

    align = ->
        y = column.y
        for element in *column.elements
            if (element.style.positionMode == 'relative')
                element.style.y = y
                y += element.style.height + column.spacing
        justify()

    fixsize = ->
        height = 0
        for element in *column.elements
            height += element.style.height
        column.height = height

        width = 0
        for element in *column.elements
            if element.style.width > width
                width = element.style.width
        column.width = width


    rawAppend = (element) ->
        column.elements[] = element
        element.master = column
        fixsize()

    append = (element) ->
        rawAppend(element)
        align()

    for child in *options.children
        append(child)

    return {
        style: column,
        id: column.id,
        append: append,
        rawAppend: rawAppend,
        align: align,
        call: call,
        draw: draw,
        background: background,
        remove: (element) ->
            for index, test in ipairs column.elements
                if (test == element)
                    table.remove(column.elements, index)
            fixsize()
            align()
        getElementById: (id) ->
            for element in *column.elements
                if (element.id == id)
                    return element
        getElementByType: (type) ->
            for element in *column.elements
                if (element.type == type)
                    return element
        getElementsById: (id) ->
            elements = {}
            for element in *column.elements
                if (element.id == id)
                    elements[] = element
            return elements
        getElementsByType: (type) ->
            elements = {}
            for element in *column.elements
                if (element.type == type)
                    elements[] = element
            return elements
        onPressed: onPressed,
        onReleased: onReleased,
        textInput: textInput,
        placeHorizontally: (mode) ->
            column.justifyContent = mode ?? column.justifyContent
    }